generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "jsonProtocol"]
  binaryTargets   = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Account, Session, User and VerificationToken
// Match next-auth model https://next-auth.js.org/adapters/prisma
// Underscored names are from there too
model Account {
  id                String  @id @default(cuid())
  userId            String  @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid()) @db.Uuid
  sessionToken String   @unique
  userId       String   @db.Uuid
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(uuid()) @db.Uuid
  legacyId      Int?      @unique
  firstName     String?
  lastName      String?
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  location      String?
  title         String?
  description   String?
  accounts      Account[]
  sessions      Session[]

  created          DateTime   @default(now())
  updated          DateTime   @default(now())
  ownedBases       Base[]
  createdResources Resource[]
}

model VerificationToken {
  token      String   @id
  identifier String // Email or other user identifier
  expires    DateTime

  @@unique([identifier, token])
}

model Base {
  id                        String  @id @default(uuid()) @db.Uuid
  legacyId                  Int?    @unique
  title                     String
  slug                      String  @unique
  // Slug that can be duplicated, only based on title
  titleDuplicationCheckSlug String
  description               String?
  owner                     User    @relation(fields: [ownerId], references: [id])
  ownerId                   String  @db.Uuid

  created   DateTime   @default(now())
  updated   DateTime   @default(now())
  resources Resource[]
}

model Resource {
  id                        String @id @default(uuid()) @db.Uuid
  legacyId                  Int?   @unique
  title                     String
  slug                      String @unique
  // Slug that can be duplicated, only based on title
  titleDuplicationCheckSlug String

  description String

  createdBy   User   @relation(fields: [createdById], references: [id])
  createdById String @db.Uuid

  base   Base?   @relation(fields: [baseId], references: [id])
  baseId String? @db.Uuid

  created  DateTime  @default(now())
  updated  DateTime  @default(now())
  contents Content[]
  linkedBy Content[] @relation(name: "contentLinkedResource")
}

enum ContentType {
  SectionTitle
  File
  Image
  Link
  ResourceLink
  Text
}

model Content {
  id String @id @default(uuid()) @db.Uuid

  // Legacy content can be imported from content blocks or sections
  legacyContentId Int? @unique
  legacySectionId Int? @unique

  order Int

  resource   Resource @relation(fields: [resourceId], references: [id])
  resourceId String   @db.Uuid

  // Data of this model depend on the type
  type ContentType

  // SectionTitle | File | Image | Link
  title String?

  // File | Image | Link
  caption String?

  // Image
  altText String?
  image   String?

  // File
  file String?

  // Link
  showPreview Boolean?
  url         String?

  // ResourceLink
  linkedResource         Resource? @relation(name: "contentLinkedResource", fields: [linkedResourceId], references: [id])
  linkedResourceId       String?   @db.Uuid
  legacyLinkedResourceId Int?

  // Text
  text String?

  created DateTime @default(now())
  updated DateTime @default(now())
}
